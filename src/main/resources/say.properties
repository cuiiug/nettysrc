linux:
1、linux的内核将外部设备都当做文件操作，对文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符）。

2、对socket的读写也有响应的描述符，成为socketfd(socket描述符).描述符就是一个数字，执行内核中的一个结构体。

3、java NIO 的核心类库多路复用器基于epoll的多路复用技术实现。

4、I/O多路复用技术通过把多个I/O的阻塞复用到同一个select的阻塞上，从而使得系统在单线程情况下可以同时处理多个客户端请求。与多线程、多进程
   的实现相比，系统开销小，不需要创建新的额外进程或线程，也不需要维护这些线程、进程的运行，节省资源。

5、epoll特点：a、支持一个进程打开的socket描述符不受限制（仅受限于操作系统的最大文件句柄数）；b、I/O效率不会随着FD数据的增加而线性下降
  c、使用mmap加速内核与用户空间的消息传递;d、epoll的api更加简单
==========================================================

1、缓冲区（buffer）：是一个对象，包含要一些要写入或读出的数据。在NIO中，所有的数据都是用缓冲区处理的，在读数据的时候，
				  直接读到缓冲区，写数据直接写到缓冲区。任何时候访问NIO中的数据，都是通过缓冲区进行操作。
1.1、缓冲区的实质是一个数组，通常是一个字节数组（ByteBuffer），也可以是其他类型的数组。缓冲区提供了对数据的结构化访问
	以及维护读写位置等信息。都实现Buffer接口
				 
2、通道（Channel）：通过数据通过Channel读取和写入。通道是双向的，可以用于读写或者同时进行。

2.1、Channel主要分为用于网络读写的SelectableChannel和用于文件操作的FileChannel。ServerSocketChannel和SocketChannel
	都是SelectableChannel的子类。
	
3、多路复用Selector：提供选择已经就绪的任务的能力。Selector会不断的轮询注册在其上的Channel，如果某个Channel上面发生
  读写事件，就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪的Channel集合，进行后续的I/O操作。
  

NIO：
1、打开ServerSocketChannel。
2、绑定监听地址InetSocketAddress
3、创建Selector，启动线程
4、将ServerSocketChannel注册到Selector，监听
5、Selector轮询就绪的Key
6、handleAccept()处理新的客户端接入
7、设置新建客户端连接的Socket参数
8、向Selector注册监听读操作SelectionKey.OP_READ
9、handleRead()异步读请求消息到ByteBuffer
10、decode请求消息
11、异步写ByteBuffer到SocketChannel




